// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: ygo_service.proto

package ygo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CardService_GetCardColors_FullMethodName                   = "/ygo.CardService/GetCardColors"
	CardService_GetCardByID_FullMethodName                     = "/ygo.CardService/GetCardByID"
	CardService_GetCardsByID_FullMethodName                    = "/ygo.CardService/GetCardsByID"
	CardService_GetCardsByName_FullMethodName                  = "/ygo.CardService/GetCardsByName"
	CardService_GetCardsReferencingNameInEffect_FullMethodName = "/ygo.CardService/GetCardsReferencingNameInEffect"
	CardService_GetArchetypalCardsUsingCardName_FullMethodName = "/ygo.CardService/GetArchetypalCardsUsingCardName"
	CardService_GetExplicitArchetypalInclusions_FullMethodName = "/ygo.CardService/GetExplicitArchetypalInclusions"
	CardService_GetExplicitArchetypalExclusions_FullMethodName = "/ygo.CardService/GetExplicitArchetypalExclusions"
	CardService_GetRandomCard_FullMethodName                   = "/ygo.CardService/GetRandomCard"
)

// CardServiceClient is the client API for CardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardServiceClient interface {
	GetCardColors(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CardColors, error)
	GetCardByID(ctx context.Context, in *ResourceID, opts ...grpc.CallOption) (*Card, error)
	GetCardsByID(ctx context.Context, in *ResourceIDs, opts ...grpc.CallOption) (*Cards, error)
	GetCardsByName(ctx context.Context, in *ResourceNames, opts ...grpc.CallOption) (*Cards, error)
	GetCardsReferencingNameInEffect(ctx context.Context, in *ResourceNames, opts ...grpc.CallOption) (*CardList, error)
	GetArchetypalCardsUsingCardName(ctx context.Context, in *Archetype, opts ...grpc.CallOption) (*CardList, error)
	GetExplicitArchetypalInclusions(ctx context.Context, in *Archetype, opts ...grpc.CallOption) (*CardList, error)
	GetExplicitArchetypalExclusions(ctx context.Context, in *Archetype, opts ...grpc.CallOption) (*CardList, error)
	GetRandomCard(ctx context.Context, in *BlackListed, opts ...grpc.CallOption) (*Card, error)
}

type cardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCardServiceClient(cc grpc.ClientConnInterface) CardServiceClient {
	return &cardServiceClient{cc}
}

func (c *cardServiceClient) GetCardColors(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CardColors, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CardColors)
	err := c.cc.Invoke(ctx, CardService_GetCardColors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) GetCardByID(ctx context.Context, in *ResourceID, opts ...grpc.CallOption) (*Card, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Card)
	err := c.cc.Invoke(ctx, CardService_GetCardByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) GetCardsByID(ctx context.Context, in *ResourceIDs, opts ...grpc.CallOption) (*Cards, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cards)
	err := c.cc.Invoke(ctx, CardService_GetCardsByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) GetCardsByName(ctx context.Context, in *ResourceNames, opts ...grpc.CallOption) (*Cards, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cards)
	err := c.cc.Invoke(ctx, CardService_GetCardsByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) GetCardsReferencingNameInEffect(ctx context.Context, in *ResourceNames, opts ...grpc.CallOption) (*CardList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CardList)
	err := c.cc.Invoke(ctx, CardService_GetCardsReferencingNameInEffect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) GetArchetypalCardsUsingCardName(ctx context.Context, in *Archetype, opts ...grpc.CallOption) (*CardList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CardList)
	err := c.cc.Invoke(ctx, CardService_GetArchetypalCardsUsingCardName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) GetExplicitArchetypalInclusions(ctx context.Context, in *Archetype, opts ...grpc.CallOption) (*CardList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CardList)
	err := c.cc.Invoke(ctx, CardService_GetExplicitArchetypalInclusions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) GetExplicitArchetypalExclusions(ctx context.Context, in *Archetype, opts ...grpc.CallOption) (*CardList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CardList)
	err := c.cc.Invoke(ctx, CardService_GetExplicitArchetypalExclusions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) GetRandomCard(ctx context.Context, in *BlackListed, opts ...grpc.CallOption) (*Card, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Card)
	err := c.cc.Invoke(ctx, CardService_GetRandomCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardServiceServer is the server API for CardService service.
// All implementations must embed UnimplementedCardServiceServer
// for forward compatibility.
type CardServiceServer interface {
	GetCardColors(context.Context, *emptypb.Empty) (*CardColors, error)
	GetCardByID(context.Context, *ResourceID) (*Card, error)
	GetCardsByID(context.Context, *ResourceIDs) (*Cards, error)
	GetCardsByName(context.Context, *ResourceNames) (*Cards, error)
	GetCardsReferencingNameInEffect(context.Context, *ResourceNames) (*CardList, error)
	GetArchetypalCardsUsingCardName(context.Context, *Archetype) (*CardList, error)
	GetExplicitArchetypalInclusions(context.Context, *Archetype) (*CardList, error)
	GetExplicitArchetypalExclusions(context.Context, *Archetype) (*CardList, error)
	GetRandomCard(context.Context, *BlackListed) (*Card, error)
	mustEmbedUnimplementedCardServiceServer()
}

// UnimplementedCardServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCardServiceServer struct{}

func (UnimplementedCardServiceServer) GetCardColors(context.Context, *emptypb.Empty) (*CardColors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardColors not implemented")
}
func (UnimplementedCardServiceServer) GetCardByID(context.Context, *ResourceID) (*Card, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardByID not implemented")
}
func (UnimplementedCardServiceServer) GetCardsByID(context.Context, *ResourceIDs) (*Cards, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardsByID not implemented")
}
func (UnimplementedCardServiceServer) GetCardsByName(context.Context, *ResourceNames) (*Cards, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardsByName not implemented")
}
func (UnimplementedCardServiceServer) GetCardsReferencingNameInEffect(context.Context, *ResourceNames) (*CardList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardsReferencingNameInEffect not implemented")
}
func (UnimplementedCardServiceServer) GetArchetypalCardsUsingCardName(context.Context, *Archetype) (*CardList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArchetypalCardsUsingCardName not implemented")
}
func (UnimplementedCardServiceServer) GetExplicitArchetypalInclusions(context.Context, *Archetype) (*CardList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExplicitArchetypalInclusions not implemented")
}
func (UnimplementedCardServiceServer) GetExplicitArchetypalExclusions(context.Context, *Archetype) (*CardList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExplicitArchetypalExclusions not implemented")
}
func (UnimplementedCardServiceServer) GetRandomCard(context.Context, *BlackListed) (*Card, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomCard not implemented")
}
func (UnimplementedCardServiceServer) mustEmbedUnimplementedCardServiceServer() {}
func (UnimplementedCardServiceServer) testEmbeddedByValue()                     {}

// UnsafeCardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardServiceServer will
// result in compilation errors.
type UnsafeCardServiceServer interface {
	mustEmbedUnimplementedCardServiceServer()
}

func RegisterCardServiceServer(s grpc.ServiceRegistrar, srv CardServiceServer) {
	// If the following call pancis, it indicates UnimplementedCardServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CardService_ServiceDesc, srv)
}

func _CardService_GetCardColors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).GetCardColors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_GetCardColors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).GetCardColors(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_GetCardByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).GetCardByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_GetCardByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).GetCardByID(ctx, req.(*ResourceID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_GetCardsByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).GetCardsByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_GetCardsByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).GetCardsByID(ctx, req.(*ResourceIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_GetCardsByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceNames)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).GetCardsByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_GetCardsByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).GetCardsByName(ctx, req.(*ResourceNames))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_GetCardsReferencingNameInEffect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceNames)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).GetCardsReferencingNameInEffect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_GetCardsReferencingNameInEffect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).GetCardsReferencingNameInEffect(ctx, req.(*ResourceNames))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_GetArchetypalCardsUsingCardName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Archetype)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).GetArchetypalCardsUsingCardName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_GetArchetypalCardsUsingCardName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).GetArchetypalCardsUsingCardName(ctx, req.(*Archetype))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_GetExplicitArchetypalInclusions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Archetype)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).GetExplicitArchetypalInclusions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_GetExplicitArchetypalInclusions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).GetExplicitArchetypalInclusions(ctx, req.(*Archetype))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_GetExplicitArchetypalExclusions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Archetype)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).GetExplicitArchetypalExclusions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_GetExplicitArchetypalExclusions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).GetExplicitArchetypalExclusions(ctx, req.(*Archetype))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_GetRandomCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlackListed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).GetRandomCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_GetRandomCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).GetRandomCard(ctx, req.(*BlackListed))
	}
	return interceptor(ctx, in, info, handler)
}

// CardService_ServiceDesc is the grpc.ServiceDesc for CardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ygo.CardService",
	HandlerType: (*CardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCardColors",
			Handler:    _CardService_GetCardColors_Handler,
		},
		{
			MethodName: "GetCardByID",
			Handler:    _CardService_GetCardByID_Handler,
		},
		{
			MethodName: "GetCardsByID",
			Handler:    _CardService_GetCardsByID_Handler,
		},
		{
			MethodName: "GetCardsByName",
			Handler:    _CardService_GetCardsByName_Handler,
		},
		{
			MethodName: "GetCardsReferencingNameInEffect",
			Handler:    _CardService_GetCardsReferencingNameInEffect_Handler,
		},
		{
			MethodName: "GetArchetypalCardsUsingCardName",
			Handler:    _CardService_GetArchetypalCardsUsingCardName_Handler,
		},
		{
			MethodName: "GetExplicitArchetypalInclusions",
			Handler:    _CardService_GetExplicitArchetypalInclusions_Handler,
		},
		{
			MethodName: "GetExplicitArchetypalExclusions",
			Handler:    _CardService_GetExplicitArchetypalExclusions_Handler,
		},
		{
			MethodName: "GetRandomCard",
			Handler:    _CardService_GetRandomCard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ygo_service.proto",
}

const (
	ProductService_GetCardsByProductID_FullMethodName    = "/ygo.ProductService/GetCardsByProductID"
	ProductService_GetProductSummaryByID_FullMethodName  = "/ygo.ProductService/GetProductSummaryByID"
	ProductService_GetProductsSummaryByID_FullMethodName = "/ygo.ProductService/GetProductsSummaryByID"
)

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServiceClient interface {
	GetCardsByProductID(ctx context.Context, in *ResourceID, opts ...grpc.CallOption) (*Product, error)
	GetProductSummaryByID(ctx context.Context, in *ResourceID, opts ...grpc.CallOption) (*ProductSummary, error)
	GetProductsSummaryByID(ctx context.Context, in *ResourceIDs, opts ...grpc.CallOption) (*Products, error)
}

type productServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiceClient(cc grpc.ClientConnInterface) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) GetCardsByProductID(ctx context.Context, in *ResourceID, opts ...grpc.CallOption) (*Product, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Product)
	err := c.cc.Invoke(ctx, ProductService_GetCardsByProductID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProductSummaryByID(ctx context.Context, in *ResourceID, opts ...grpc.CallOption) (*ProductSummary, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductSummary)
	err := c.cc.Invoke(ctx, ProductService_GetProductSummaryByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProductsSummaryByID(ctx context.Context, in *ResourceIDs, opts ...grpc.CallOption) (*Products, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Products)
	err := c.cc.Invoke(ctx, ProductService_GetProductsSummaryByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServiceServer is the server API for ProductService service.
// All implementations must embed UnimplementedProductServiceServer
// for forward compatibility.
type ProductServiceServer interface {
	GetCardsByProductID(context.Context, *ResourceID) (*Product, error)
	GetProductSummaryByID(context.Context, *ResourceID) (*ProductSummary, error)
	GetProductsSummaryByID(context.Context, *ResourceIDs) (*Products, error)
	mustEmbedUnimplementedProductServiceServer()
}

// UnimplementedProductServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductServiceServer struct{}

func (UnimplementedProductServiceServer) GetCardsByProductID(context.Context, *ResourceID) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardsByProductID not implemented")
}
func (UnimplementedProductServiceServer) GetProductSummaryByID(context.Context, *ResourceID) (*ProductSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductSummaryByID not implemented")
}
func (UnimplementedProductServiceServer) GetProductsSummaryByID(context.Context, *ResourceIDs) (*Products, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductsSummaryByID not implemented")
}
func (UnimplementedProductServiceServer) mustEmbedUnimplementedProductServiceServer() {}
func (UnimplementedProductServiceServer) testEmbeddedByValue()                        {}

// UnsafeProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServiceServer will
// result in compilation errors.
type UnsafeProductServiceServer interface {
	mustEmbedUnimplementedProductServiceServer()
}

func RegisterProductServiceServer(s grpc.ServiceRegistrar, srv ProductServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductService_ServiceDesc, srv)
}

func _ProductService_GetCardsByProductID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetCardsByProductID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetCardsByProductID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetCardsByProductID(ctx, req.(*ResourceID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProductSummaryByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProductSummaryByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetProductSummaryByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProductSummaryByID(ctx, req.(*ResourceID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProductsSummaryByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProductsSummaryByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetProductsSummaryByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProductsSummaryByID(ctx, req.(*ResourceIDs))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductService_ServiceDesc is the grpc.ServiceDesc for ProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ygo.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCardsByProductID",
			Handler:    _ProductService_GetCardsByProductID_Handler,
		},
		{
			MethodName: "GetProductSummaryByID",
			Handler:    _ProductService_GetProductSummaryByID_Handler,
		},
		{
			MethodName: "GetProductsSummaryByID",
			Handler:    _ProductService_GetProductsSummaryByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ygo_service.proto",
}

const (
	CardRestrictionService_GetEffectiveTimelineForFormat_FullMethodName = "/ygo.CardRestrictionService/GetEffectiveTimelineForFormat"
)

// CardRestrictionServiceClient is the client API for CardRestrictionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardRestrictionServiceClient interface {
	GetEffectiveTimelineForFormat(ctx context.Context, in *Format, opts ...grpc.CallOption) (*EffectiveTimeline, error)
}

type cardRestrictionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCardRestrictionServiceClient(cc grpc.ClientConnInterface) CardRestrictionServiceClient {
	return &cardRestrictionServiceClient{cc}
}

func (c *cardRestrictionServiceClient) GetEffectiveTimelineForFormat(ctx context.Context, in *Format, opts ...grpc.CallOption) (*EffectiveTimeline, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EffectiveTimeline)
	err := c.cc.Invoke(ctx, CardRestrictionService_GetEffectiveTimelineForFormat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardRestrictionServiceServer is the server API for CardRestrictionService service.
// All implementations must embed UnimplementedCardRestrictionServiceServer
// for forward compatibility.
type CardRestrictionServiceServer interface {
	GetEffectiveTimelineForFormat(context.Context, *Format) (*EffectiveTimeline, error)
	mustEmbedUnimplementedCardRestrictionServiceServer()
}

// UnimplementedCardRestrictionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCardRestrictionServiceServer struct{}

func (UnimplementedCardRestrictionServiceServer) GetEffectiveTimelineForFormat(context.Context, *Format) (*EffectiveTimeline, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEffectiveTimelineForFormat not implemented")
}
func (UnimplementedCardRestrictionServiceServer) mustEmbedUnimplementedCardRestrictionServiceServer() {
}
func (UnimplementedCardRestrictionServiceServer) testEmbeddedByValue() {}

// UnsafeCardRestrictionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardRestrictionServiceServer will
// result in compilation errors.
type UnsafeCardRestrictionServiceServer interface {
	mustEmbedUnimplementedCardRestrictionServiceServer()
}

func RegisterCardRestrictionServiceServer(s grpc.ServiceRegistrar, srv CardRestrictionServiceServer) {
	// If the following call pancis, it indicates UnimplementedCardRestrictionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CardRestrictionService_ServiceDesc, srv)
}

func _CardRestrictionService_GetEffectiveTimelineForFormat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Format)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardRestrictionServiceServer).GetEffectiveTimelineForFormat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardRestrictionService_GetEffectiveTimelineForFormat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardRestrictionServiceServer).GetEffectiveTimelineForFormat(ctx, req.(*Format))
	}
	return interceptor(ctx, in, info, handler)
}

// CardRestrictionService_ServiceDesc is the grpc.ServiceDesc for CardRestrictionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardRestrictionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ygo.CardRestrictionService",
	HandlerType: (*CardRestrictionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEffectiveTimelineForFormat",
			Handler:    _CardRestrictionService_GetEffectiveTimelineForFormat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ygo_service.proto",
}

const (
	ScoreService_GetScoresByFormatAndDate_FullMethodName = "/ygo.ScoreService/GetScoresByFormatAndDate"
	ScoreService_GetCardScoreByID_FullMethodName         = "/ygo.ScoreService/GetCardScoreByID"
	ScoreService_GetCardScoresByIDs_FullMethodName       = "/ygo.ScoreService/GetCardScoresByIDs"
)

// ScoreServiceClient is the client API for ScoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScoreServiceClient interface {
	GetScoresByFormatAndDate(ctx context.Context, in *RestrictedContentRequest, opts ...grpc.CallOption) (*ScoresForFormatAndDate, error)
	GetCardScoreByID(ctx context.Context, in *ResourceID, opts ...grpc.CallOption) (*CardScore, error)
	GetCardScoresByIDs(ctx context.Context, in *ResourceIDs, opts ...grpc.CallOption) (*CardScores, error)
}

type scoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScoreServiceClient(cc grpc.ClientConnInterface) ScoreServiceClient {
	return &scoreServiceClient{cc}
}

func (c *scoreServiceClient) GetScoresByFormatAndDate(ctx context.Context, in *RestrictedContentRequest, opts ...grpc.CallOption) (*ScoresForFormatAndDate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScoresForFormatAndDate)
	err := c.cc.Invoke(ctx, ScoreService_GetScoresByFormatAndDate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreServiceClient) GetCardScoreByID(ctx context.Context, in *ResourceID, opts ...grpc.CallOption) (*CardScore, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CardScore)
	err := c.cc.Invoke(ctx, ScoreService_GetCardScoreByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreServiceClient) GetCardScoresByIDs(ctx context.Context, in *ResourceIDs, opts ...grpc.CallOption) (*CardScores, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CardScores)
	err := c.cc.Invoke(ctx, ScoreService_GetCardScoresByIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScoreServiceServer is the server API for ScoreService service.
// All implementations must embed UnimplementedScoreServiceServer
// for forward compatibility.
type ScoreServiceServer interface {
	GetScoresByFormatAndDate(context.Context, *RestrictedContentRequest) (*ScoresForFormatAndDate, error)
	GetCardScoreByID(context.Context, *ResourceID) (*CardScore, error)
	GetCardScoresByIDs(context.Context, *ResourceIDs) (*CardScores, error)
	mustEmbedUnimplementedScoreServiceServer()
}

// UnimplementedScoreServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedScoreServiceServer struct{}

func (UnimplementedScoreServiceServer) GetScoresByFormatAndDate(context.Context, *RestrictedContentRequest) (*ScoresForFormatAndDate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScoresByFormatAndDate not implemented")
}
func (UnimplementedScoreServiceServer) GetCardScoreByID(context.Context, *ResourceID) (*CardScore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardScoreByID not implemented")
}
func (UnimplementedScoreServiceServer) GetCardScoresByIDs(context.Context, *ResourceIDs) (*CardScores, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardScoresByIDs not implemented")
}
func (UnimplementedScoreServiceServer) mustEmbedUnimplementedScoreServiceServer() {}
func (UnimplementedScoreServiceServer) testEmbeddedByValue()                      {}

// UnsafeScoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScoreServiceServer will
// result in compilation errors.
type UnsafeScoreServiceServer interface {
	mustEmbedUnimplementedScoreServiceServer()
}

func RegisterScoreServiceServer(s grpc.ServiceRegistrar, srv ScoreServiceServer) {
	// If the following call pancis, it indicates UnimplementedScoreServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ScoreService_ServiceDesc, srv)
}

func _ScoreService_GetScoresByFormatAndDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestrictedContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServiceServer).GetScoresByFormatAndDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScoreService_GetScoresByFormatAndDate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServiceServer).GetScoresByFormatAndDate(ctx, req.(*RestrictedContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoreService_GetCardScoreByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServiceServer).GetCardScoreByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScoreService_GetCardScoreByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServiceServer).GetCardScoreByID(ctx, req.(*ResourceID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoreService_GetCardScoresByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServiceServer).GetCardScoresByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScoreService_GetCardScoresByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServiceServer).GetCardScoresByIDs(ctx, req.(*ResourceIDs))
	}
	return interceptor(ctx, in, info, handler)
}

// ScoreService_ServiceDesc is the grpc.ServiceDesc for ScoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ygo.ScoreService",
	HandlerType: (*ScoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetScoresByFormatAndDate",
			Handler:    _ScoreService_GetScoresByFormatAndDate_Handler,
		},
		{
			MethodName: "GetCardScoreByID",
			Handler:    _ScoreService_GetCardScoreByID_Handler,
		},
		{
			MethodName: "GetCardScoresByIDs",
			Handler:    _ScoreService_GetCardScoresByIDs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ygo_service.proto",
}
