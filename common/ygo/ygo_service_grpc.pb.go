// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: ygo_service.proto

package ygo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CardService_GetCardColors_FullMethodName  = "/ygo.CardService/GetCardColors"
	CardService_GetCardByID_FullMethodName    = "/ygo.CardService/GetCardByID"
	CardService_GetCardsByID_FullMethodName   = "/ygo.CardService/GetCardsByID"
	CardService_GetCardsByName_FullMethodName = "/ygo.CardService/GetCardsByName"
	CardService_GetRandomCard_FullMethodName  = "/ygo.CardService/GetRandomCard"
)

// CardServiceClient is the client API for CardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardServiceClient interface {
	GetCardColors(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CardColors, error)
	GetCardByID(ctx context.Context, in *ResourceID, opts ...grpc.CallOption) (*Card, error)
	GetCardsByID(ctx context.Context, in *ResourceIDs, opts ...grpc.CallOption) (*Cards, error)
	GetCardsByName(ctx context.Context, in *ResourceNames, opts ...grpc.CallOption) (*Cards, error)
	GetRandomCard(ctx context.Context, in *BlackListed, opts ...grpc.CallOption) (*Card, error)
}

type cardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCardServiceClient(cc grpc.ClientConnInterface) CardServiceClient {
	return &cardServiceClient{cc}
}

func (c *cardServiceClient) GetCardColors(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CardColors, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CardColors)
	err := c.cc.Invoke(ctx, CardService_GetCardColors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) GetCardByID(ctx context.Context, in *ResourceID, opts ...grpc.CallOption) (*Card, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Card)
	err := c.cc.Invoke(ctx, CardService_GetCardByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) GetCardsByID(ctx context.Context, in *ResourceIDs, opts ...grpc.CallOption) (*Cards, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cards)
	err := c.cc.Invoke(ctx, CardService_GetCardsByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) GetCardsByName(ctx context.Context, in *ResourceNames, opts ...grpc.CallOption) (*Cards, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cards)
	err := c.cc.Invoke(ctx, CardService_GetCardsByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) GetRandomCard(ctx context.Context, in *BlackListed, opts ...grpc.CallOption) (*Card, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Card)
	err := c.cc.Invoke(ctx, CardService_GetRandomCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardServiceServer is the server API for CardService service.
// All implementations must embed UnimplementedCardServiceServer
// for forward compatibility.
type CardServiceServer interface {
	GetCardColors(context.Context, *emptypb.Empty) (*CardColors, error)
	GetCardByID(context.Context, *ResourceID) (*Card, error)
	GetCardsByID(context.Context, *ResourceIDs) (*Cards, error)
	GetCardsByName(context.Context, *ResourceNames) (*Cards, error)
	GetRandomCard(context.Context, *BlackListed) (*Card, error)
	mustEmbedUnimplementedCardServiceServer()
}

// UnimplementedCardServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCardServiceServer struct{}

func (UnimplementedCardServiceServer) GetCardColors(context.Context, *emptypb.Empty) (*CardColors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardColors not implemented")
}
func (UnimplementedCardServiceServer) GetCardByID(context.Context, *ResourceID) (*Card, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardByID not implemented")
}
func (UnimplementedCardServiceServer) GetCardsByID(context.Context, *ResourceIDs) (*Cards, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardsByID not implemented")
}
func (UnimplementedCardServiceServer) GetCardsByName(context.Context, *ResourceNames) (*Cards, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardsByName not implemented")
}
func (UnimplementedCardServiceServer) GetRandomCard(context.Context, *BlackListed) (*Card, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomCard not implemented")
}
func (UnimplementedCardServiceServer) mustEmbedUnimplementedCardServiceServer() {}
func (UnimplementedCardServiceServer) testEmbeddedByValue()                     {}

// UnsafeCardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardServiceServer will
// result in compilation errors.
type UnsafeCardServiceServer interface {
	mustEmbedUnimplementedCardServiceServer()
}

func RegisterCardServiceServer(s grpc.ServiceRegistrar, srv CardServiceServer) {
	// If the following call pancis, it indicates UnimplementedCardServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CardService_ServiceDesc, srv)
}

func _CardService_GetCardColors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).GetCardColors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_GetCardColors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).GetCardColors(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_GetCardByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).GetCardByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_GetCardByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).GetCardByID(ctx, req.(*ResourceID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_GetCardsByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).GetCardsByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_GetCardsByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).GetCardsByID(ctx, req.(*ResourceIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_GetCardsByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceNames)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).GetCardsByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_GetCardsByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).GetCardsByName(ctx, req.(*ResourceNames))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_GetRandomCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlackListed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).GetRandomCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_GetRandomCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).GetRandomCard(ctx, req.(*BlackListed))
	}
	return interceptor(ctx, in, info, handler)
}

// CardService_ServiceDesc is the grpc.ServiceDesc for CardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ygo.CardService",
	HandlerType: (*CardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCardColors",
			Handler:    _CardService_GetCardColors_Handler,
		},
		{
			MethodName: "GetCardByID",
			Handler:    _CardService_GetCardByID_Handler,
		},
		{
			MethodName: "GetCardsByID",
			Handler:    _CardService_GetCardsByID_Handler,
		},
		{
			MethodName: "GetCardsByName",
			Handler:    _CardService_GetCardsByName_Handler,
		},
		{
			MethodName: "GetRandomCard",
			Handler:    _CardService_GetRandomCard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ygo_service.proto",
}
